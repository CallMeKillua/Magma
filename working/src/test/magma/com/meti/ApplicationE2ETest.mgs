import native "stdlib";

native def malloc(size : Size) : Ref[Any];
native def free(block : Ref[Any]) : Void;

trait Array[T] {
    size : Size;
    drop : () => Void;
}

class def DynamicArray[T](size : Size) >> Array[T] => {
    const memory = malloc(size);

    def drop() => free(memory);
}

struct String {
    +: I8 => String;
}

class def ArrayString(value : Array[I8]) >> String => {
    def +(suffix : I8) => {

    }
}

// Should be null terminated!
out def apply(value : Ref[I8]) => [String]{
    + : suffix => {

    }
}

out def unapply(value : String) => {

}

import native "stdio";

native def printf(format : Ref[I8], args : Any...) : Void;

def print(value : String) => {
    printf("%s", value);
}

def it(name : String, action : () => Void) => {
}

def describe(name : String, action : () => Void) => {
    print(name + '\n');
}

def assertTrue(value : Bool) => {
}

def main() => {
    describe("The application", () =>
        it("should work", () => {
            assertTrue(true);
        });
    );
}