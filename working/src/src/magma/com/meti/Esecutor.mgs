import { String, Error } from com.meti;

struct Result {
    enum Validity {
        Success,
        Failure,
        Unknown,
    }

    validity : Validity;
    message : String;
}

def it(action : () => Result ? Error) =>
    try action()
    catch(e : Error) [Result]{validity: Failure, message : e.message};

export type ItType = typeof it;
export def describe(name : String, action : ItType => Map[String, Result]) => {
    const results = action();

    const resultsSummary = results
        .values()
        .map([_.validity == Success, 1])
        .foldRight([0, 0], _+_);

    const resultsString = resultsSummary[0] + '/' + resultsSummary[1];
    const separator = " - ";
    print(resultsString + separator + name);

    results.forEach(result => {
        const suffix = result.message.isBlank()
            ? String.Empty
            : ": " + result.message;

        print('\t' + Validity(result.validity) + separator + suffix);
    });
}