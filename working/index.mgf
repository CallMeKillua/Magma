import native "string";
import native "stdio";

native def strlen(array : Ref[I8]) : AnySize;
native def printf(format : Ref[I8], args : ...Any) : Void;

throwable struct IndexException {
    index : AnySize;
    length : AnySize;
}

struct String {
    length : AnySize;

    callable apply : AnySize => I8 ? IndexException;
    drop : () => Void;
}

out def StringConstructor(array : Ref[I8]) : String => {
    return {
        length : strlen(array),
        drop   : () => free(array),
        apply  : (index : AnySize) =>
            if(index < length) array[index];
            else throw <IndexException>{index, length};
    }
}

out def StringDeconstructor(value : String) => {
    const array = malloc(I8.size * value.length);
    for(let i = 0; i < value.length; i++) array[i]] = value(i);
    return array;
}

throwable struct IOException {
    message : String;
    print : () => printf("%s", message);
}

const Application = {
    run : () => throw <IOException>{"Method not implemented yet."};
}

def main() : I16 => {
    try Application.run();
    catch(e : IOException) e.print();
    return 0;
}